// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Kevin BUi				:| 04/30/2025:| Added stopwatch_counter
// ============================================================================
//
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
//
//  *****************************************************************************
//  ******************Modified slightly by Frank Higgins - 8/19/2020*************
//  ***********************Temple ECE Department*********************************


`define ENABLE_SW
`define ENABLE_LED
`define ENABLE_KEY
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_CLOCK1
`define ENABLE_ARDUINO 

module DE10_LITE_Temple_Top(

// added this outside the defines for the rotary encoder
	output logic	    [1:0]		arduino_out,
	input logic	    [1:0]		arduino_in,

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		dram_addr,
	output		     [1:0]		dram_ba,
	output		          		dram_cas_n,
	output		          		dram_cke,
	output		          		dram_clk,
	output		          		dram_cs_n,
	inout 		    [15:0]		dram_dq,
	output		          		dram_ldqm,
	output		          		dram_ras_n,
	output		          		dram_udqm,
	output		          		dram_we_n,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		hex0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		hex1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		hex2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		hex3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		hex4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		hex5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		key,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		ledr,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		vga_b,
	output		     [3:0]		vga_g,
	output		          		vga_hs,
	output		     [3:0]		vga_r,
	output		          		vga_vs,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		gsensor_cs_n,
	input 		     [2:1]		gsensor_int,
	output		          		gsensor_sclk,
	inout 		          		gsensor_sdi,
	inout 		          		gsensor_sdo,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		arduino_io,
	inout 		          		arduino_reset_n,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		gpio,
`endif

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		adc_clk_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		max10_clk1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		max10_clk2_50,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
//	input 		     [9:0]		sw
	input 		     [2:0]		sw
`endif
);
	logic [3:0] an;
	logic [6:0] cathode;

	// tie unused LED's low
	assign ledr[9:6] = 4'b0;	// disable the LED's

	assign hex0[7]=1'b1;
	assign hex1[7]=1'b1;
	assign hex2[7]=1'b1;
	assign hex3[7]=1'b1;
	assign hex4[7]=1'b1;
	assign hex5[7]=1'b1;
	
	// logic for sensor
	logic sensor;
	assign sensor = arduino_io[0];
	
	// logic for putting leds onto each switch
	assign ledr[0] = ~key[0]; // turns on when the rst button is pressed
	assign ledr[1] = ~key[1]; // turns on when the start button is pressed (low)
	assign ledr[2] = sensor; // turns on when the sensor is covered

	// Instantiate your stopwatch timer
	stopwatch_counter u_stopwatch (
    	.hex0(hex0[6:0]), .hex1(hex1[6:0]), .hex2(hex2[6:0]),
    	.hex3(hex3[6:0]), .hex4(hex4[6:0]), .hex5(hex5[6:0]),
    	.start(~key[1]),           
    	.rst(~key[0]),             
    	.light(sensor),             
    	.clk(max10_clk1_50)
	);

endmodule
